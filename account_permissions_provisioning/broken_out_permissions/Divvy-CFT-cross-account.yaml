#CFT for creating a cross account role to be used with your DivvyCloud instances. This is for the external accounts
#(not the local account that is running the DivvyCloud tenant)
#https://docs.divvycloud.com/docs/instance-assume-role-aws
---
AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates a cross account role to allow DivvyCloud to connect to this account if the software is running in a different account

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Inputs"
        Parameters:
          - ExternalId
          - SourceAccountId
      - Label:
          default: "Permissions"
        Parameters:
          - TypeOfUser
          - EDHPermissions
    ParameterLabels:
      TypeOfUser:
        default: "Permissions Type"
      EDHPermissions:
        default: "EDH Permissions"
      ExternalId:
        default: "External ID"
      SourceAccountId:
        default: "Source Account ID (where DivvyCloud is running)"

Parameters:
  ExternalId:
    Type: String
    Default: divvycloud
    AllowedPattern: '\S+'
    ConstraintDescription: Please enter an external ID
    Description: Enter Divvy External ID
  SourceAccountId:
    Type: String
    AllowedPattern: \d{12}
    Description: Enter source account ID that will be assuming the role. A 12 digit number is expected (ex. 123456789012)
  TypeOfUser:
    Type: String
    Default: Standard User
    AllowedValues:
      - Standard User
      - Power User
    Description: Type of permissions to give (Standard for readonly, Power for read/write)
  EDHPermissions:
    Type: String
    Default: None
    AllowedValues:
      - None
      - Consumer
      - Producer
    Description: Permissions to enable DivvyCloud to configure Event Driven Harvesting (EDH)
    
Conditions:
  AddStandardUser: !Equals [ !Ref TypeOfUser, "Standard User" ]
  AddPowerUser: !Equals [ !Ref TypeOfUser, "Power User" ]
  AddEDHConsumer: !Equals [ !Ref EDHPermissions, "Consumer" ]
  AddEDHProducer: !Equals [ !Ref EDHPermissions, "Producer" ]

Resources:
  PolicyCloudcwPutMetricLogs:
    Condition: AddStandardUser
    DependsOn:
      - DivvyCloudStandardRole
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Ref 'ParameterDivvyCloudcwPutMetricLogsPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 
              - cloudwatch:PutMetricData
              - logs:CreateLogGroup
            Resource: "*"
          -
            Effect: Allow
            Action: 
              - logs:PutLogEvents
              - logs:CreateLogStream
            Resource: !Join [ '', [ "arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":log-group:DivvyCloud-EC2:log-stream:*" ] ]
      Roles:
        - Ref: DivvyCloudStandardRole

  PolicyEDHConsumer:
    Type: AWS::IAM::ManagedPolicy
    Condition: AddEDHConsumer
    Properties:
      ManagedPolicyName: DivvyCloudEDHConsumer
      Roles:
      - Ref: Role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - events:DeleteRule
          - events:DescribeEventBus
          - events:DescribeRule
          - events:PutPermission
          - events:PutRule
          - events:PutTargets
          - events:RemoveTargets
          - iam:GetPolicy
          - iam:GetPolicyVersion
          - iam:GetRole
          - iam:ListPolicies
          - iam:ListPolicyVersions
          - organizations:DescribeOrganization
          - sqs:ListQueues
          - sqs:CreateQueue
          - sqs:DeleteQueue
          - sqs:ReceiveMessage
          - sqs:SetQueueAttributes
          - sqs:DeleteMessage
          - sqs:DeleteMessageBatch
          Effect: Allow
          Resource: "*"
      
  PolicyEDHProducer:
    Type: AWS::IAM::ManagedPolicy
    Condition: AddEDHProducer
    Properties:
      ManagedPolicyName: DivvyCloudEDHProducer
      Roles:
      - Ref: Role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - events:DeleteRule
          - events:DescribeRule
          - events:PutRule
          - events:PutTargets
          - events:RemoveTargets
          - iam:CreatePolicyVersion
          - iam:GetPolicy
          - iam:GetPolicyVersion
          - iam:GetRole
          - organizations:DescribeOrganization
          Effect: Allow
          Resource: "*"
        - Effect: Allow
          Action:
          - iam:CreateRole
          - iam:AttachRolePolicy
          - iam:PassRole
          Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/service-role/event-driven-harvest/*eventbus-role'
        - Effect: Allow
          Action:
          - iam:CreatePolicy
          - iam:CreatePolicyVersion
          - iam:DeletePolicyVersion
          Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/service-role/event-driven-harvest/*eventbus-policy'
          
  PolicyPowerUser:
    Type: AWS::IAM::ManagedPolicy
    Condition: AddPowerUser
    Properties:
      ManagedPolicyName: DivvyCloud-PowerUser-Policy
      Roles:
      - Ref: Role
      PolicyDocument:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: s3://get.divvycloud.com/policies/PowerUserPolicy.json

  #Read only policy exceeds AWS limits and must be broken into two
  PolicyReadOnly1:
    Type: AWS::IAM::ManagedPolicy
    Condition: AddStandardUser
    Properties:
      ManagedPolicyName: DivvyCloudStandardUserPolicy1
      Roles:
      - Ref: Role
      PolicyDocument:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: s3://get.divvycloud.com/policies/ReadOnlyPolicy1.json

  #Read only policy exceeds AWS limits and must be broken into three. There is no significance to the breakdown
  PolicyReadOnly2:
    Type: AWS::IAM::ManagedPolicy
    Condition: AddStandardUser
    Properties:
      ManagedPolicyName: DivvyCloudStandardUserPolicy2
      Roles:
      - Ref: Role
      PolicyDocument:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: s3://get.divvycloud.com/policies/ReadOnlyPolicy2.json

  #Read only policy exceeds AWS limits and must be broken into two. There is no significance to the breakdown
  PolicyReadOnly3:
    Type: AWS::IAM::ManagedPolicy
    Condition: AddStandardUser
    Properties:
      ManagedPolicyName: DivvyCloudStandardUserPolicy3
      Roles:
      - Ref: Role
      PolicyDocument:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: s3://get.divvycloud.com/policies/ReadOnlyPolicy3.json

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join [ ":", [ 'arn:aws:iam:', !Ref SourceAccountId, root ] ]
          Action: sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId:
                Ref: ExternalId

Outputs:
  ExternalId:
    Description: Your External ID
    Value:
      Ref: ExternalId
  RoleARNID:
    Description: Your Role ARN ID
    Value:
      Fn::GetAtt:
      - Role
      - Arn
